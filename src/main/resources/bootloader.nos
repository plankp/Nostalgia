;;
;; Bootloader
;;
;;   Ok, honestly, if you don't load this into memory 0x0000 then I don't know
;;   what to say... The instruction pointer starts at 0...
;;
;;   We do a couple things here:
;;   - Initialize the graphics memory by turning all cells into white text on
;;     black.
;;   - Set stack pointer to 0x800. The stack grows upwards towards 0x0000 and
;;     will eventually overwrite the bootloader! Yay!
;;   - Set instruction pointer to 0x4000; that is where the kernel will be at.
;;

    .SET    VIDMEM, 0x2000
    .SET    NULCHR, 0x0007

;;
;; Initialize video memory:
;;   All cells will be displaying the null byte, white text on black.
;;
    MOV.I   %R2, NULCHR         ; move into register because memstore needs it
    MOV.I   %R1, 4000           ; screen has 80 * 25 cells, cells are wordsized
    SUB.I   %R1, 2              ; wordsize is 2 bytes
    ST.W    %R2, VIDMEM, %R1    ; VIDMEM[%R1] = NULCHR
    JABS.GT %R1, 6              ; go back to the SUB.I instruction
                                ; Note: at this point, %R1 = 0.

;;
;; Setup stack pointer:
;;   Grows from 0x1000 upwards (towards 0x0000).
;;
    MOV.I   %SP, 0x1000
    PUSH    %R0, 0              ; sanity check
    POP     %R0, 0

;;
;; Start the kernel:
;;   Sets the instruction pointer to 0x4000. Note: this is not a call but a
;;   absolute jump, so *do not* call RET from the kernel...
;;
    MOV.I   %R1, 0              ; clear all general-purpose registers
    MOV.I   %R2, 0
    MOV.I   %R3, 0
    JABS.Z  %R0, 0x4000

;;
;; Remember the stack pointer? We make sure the stack is actually present by
;; filling from the current address upto 0x1000 with zeros.
;;
    .ZERO   0x1000

    .UNSET  VIDMEM
    .UNSET  NULCHR